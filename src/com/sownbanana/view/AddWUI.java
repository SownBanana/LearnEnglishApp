/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sownbanana.view;

import com.sownbanana.controller.WordController;
import com.sownbanana.model.Word;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.FlowLayout;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.stage.FileChooser;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author SownBanana
 */
public class AddWUI extends javax.swing.JFrame {

    String imageURL = null;
    String voiceURL = null;
    boolean checkExistWord = false;
    boolean isEdit = false;
    boolean checkCreateEditUI = false;
    MouseListener clkEdit;

    /**
     * Creates new form AddWUI
     */
    public AddWUI() {
        initComponents();
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.setLocationRelativeTo(null);
        imgLable.setSize(210, 244);
        clearField();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        insertHashtagLbl = new javax.swing.JLabel();
        phoneticField = new javax.swing.JTextField();
        hashtagField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        hintTextArea = new javax.swing.JTextArea();
        imgLable = new javax.swing.JLabel();
        pickImg = new javax.swing.JButton();
        insertMeanLbl = new javax.swing.JLabel();
        typeCombo = new javax.swing.JComboBox<>();
        addButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        pickVoice = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        insertWordLbl = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        insertHintLbl = new javax.swing.JLabel();
        voiceFileURL = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        wordField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        meanField = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Thêm Từ/Cụm Từ");
        setResizable(false);

        jLabel6.setText("Hashtag");

        insertHashtagLbl.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        insertHashtagLbl.setForeground(new java.awt.Color(255, 51, 51));
        insertHashtagLbl.setText("*Thêm ít nhất một hashtag");

        phoneticField.setText("Phiêm âm được sinh tự động nếu bạn bỏ trống");
        phoneticField.setToolTipText("Điền từ hoặc cụm từ bạn muốn ghi nhớ");
        phoneticField.setAutoscrolls(false);
        phoneticField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                phoneticFieldFocusGained(evt);
            }
        });
        phoneticField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                phoneticFieldMouseClicked(evt);
            }
        });
        phoneticField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneticFieldActionPerformed(evt);
            }
        });
        phoneticField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                phoneticFieldKeyReleased(evt);
            }
        });

        hashtagField.setToolTipText("Thêm ít nhất một hashtag cho từ/cụm từ, các hashtag ngăn cách bới dấu cách \" \"");
        hashtagField.setDragEnabled(true);
        hashtagField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                hashtagFieldFocusGained(evt);
            }
        });
        hashtagField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                hashtagFieldKeyPressed(evt);
            }
        });

        hintTextArea.setColumns(20);
        hintTextArea.setLineWrap(true);
        hintTextArea.setRows(5);
        hintTextArea.setToolTipText("Điền gợi ý cho từ/cụm từ của bạn");
        hintTextArea.setWrapStyleWord(true);
        hintTextArea.setDragEnabled(true);
        hintTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                hintTextAreaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(hintTextArea);

        imgLable.setBackground(new java.awt.Color(255, 255, 255));
        imgLable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imgLable.setText("Thêm ảnh");
        imgLable.setOpaque(true);

        pickImg.setText("Chọn ảnh");
        pickImg.setToolTipText("Chọn một ảnh minh hoạ cho từ/cụm từ của bạn");
        pickImg.setBorderPainted(false);
        pickImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickImgActionPerformed(evt);
            }
        });

        insertMeanLbl.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        insertMeanLbl.setForeground(new java.awt.Color(255, 51, 51));
        insertMeanLbl.setText("*Bạn cần điền nghĩa");

        typeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Noun", "Verb", "Adjective", "Adverb", "Pronoun", "Noun Phrase", "Verb Phrase", "Idioms", "Clause" }));
        typeCombo.setToolTipText("Chọn một từ loại cho từ hoặc chọn cụm từ");
        typeCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                typeComboItemStateChanged(evt);
            }
        });
        typeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboActionPerformed(evt);
            }
        });

        addButton.setText("Thêm");
        addButton.setToolTipText("Thêm từ/cụm từ vào từ điển của bạn");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Thoát");
        cancelButton.setToolTipText("Quay lại trang chủ");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Speech");

        pickVoice.setText("Chọn File");
        pickVoice.setToolTipText("Chọn một file âm thanh cho giọng nói hoặc giọng nói sẽ được sinh tự động");
        pickVoice.setAutoscrolls(true);
        pickVoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickVoiceActionPerformed(evt);
            }
        });

        jLabel1.setText("Phiên âm");

        jLabel2.setText("Nghĩa");

        jLabel4.setText("Từ loại");

        insertWordLbl.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        insertWordLbl.setForeground(new java.awt.Color(255, 51, 51));
        insertWordLbl.setText("*");

        jLabel5.setText("Gợi ý");

        insertHintLbl.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        insertHintLbl.setForeground(new java.awt.Color(255, 51, 51));
        insertHintLbl.setText("*Bạn cần điền gợi ý");

        voiceFileURL.setText("File Name");
        voiceFileURL.setToolTipText("Chọn một file âm thanh cho giọng nói hoặc giọng nói sẽ được sinh tự động");
        voiceFileURL.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jButton1.setText("Phát");
        jButton1.setToolTipText("Phát file đã chọn hoặc âm thanh sinh tự động");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Từ/Cụm từ");

        wordField.setToolTipText("Điền từ hoặc cụm từ bạn muốn ghi nhớ");
        wordField.setAutoscrolls(false);
        wordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                wordFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                wordFieldFocusLost(evt);
            }
        });
        wordField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wordFieldMouseClicked(evt);
            }
        });
        wordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordFieldActionPerformed(evt);
            }
        });
        wordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                wordFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                wordFieldKeyReleased(evt);
            }
        });

        meanField.setColumns(20);
        meanField.setRows(5);
        meanField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                meanFieldFocusGained(evt);
            }
        });
        meanField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                meanFieldKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(meanField);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(wordField)
                    .addComponent(phoneticField)
                    .addComponent(hashtagField)
                    .addComponent(jScrollPane1)
                    .addComponent(typeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(voiceFileURL)
                        .addGap(87, 87, 87)
                        .addComponent(pickVoice)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(insertMeanLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(insertHintLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(insertWordLbl)
                            .addComponent(insertHashtagLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(imgLable, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pickImg)
                        .addGap(119, 119, 119))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imgLable, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(wordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(insertWordLbl))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(phoneticField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(insertMeanLbl))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(typeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(insertHintLbl))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hashtagField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(insertHashtagLbl))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(pickImg))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(pickVoice))
                    .addComponent(voiceFileURL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(cancelButton))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void phoneticFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_phoneticFieldMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneticFieldMouseClicked

    private void phoneticFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneticFieldActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_phoneticFieldActionPerformed

    private void pickImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickImgActionPerformed
        // TODO add your handling code here:
        int chose = -1;
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter imgFilter = new FileNameExtensionFilter("Image files (*.jpg, *.jpeg, *.png, *.gif, *.svg)", "jpg", "jpeg", "png", "gif", "svg");
        fileChooser.setFileFilter(imgFilter);
        fileChooser.setDialogTitle("Chọn ảnh");
        chose = fileChooser.showOpenDialog(null);
        if (chose == JFileChooser.APPROVE_OPTION) {
            try {
                File img = fileChooser.getSelectedFile();
                imageURL = img.getPath();
//            Image image = new ImageIcon(imageURL).getImage();
                BufferedImage image = ImageIO.read(img);
                ImageIcon icon = new ImageIcon(image.getScaledInstance(imgLable.getWidth(), imgLable.getHeight(), BufferedImage.SCALE_SMOOTH));
                imgLable.setIcon(icon);
                imgLable.setText("");
            } catch (IOException ex) {
                Logger.getLogger(AddWUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_pickImgActionPerformed

    private void typeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboActionPerformed
        // TODO add your handling code here:
//        System.out.println(typeCombo.);
    }//GEN-LAST:event_typeComboActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        String word = wordField.getText().trim().replaceAll("\\s+", " ").toLowerCase();
        String ipa = phoneticField.getText().trim().replaceAll("\\s+", " ");
        String mean = meanField.getText().trim().replaceAll("\\s+", " ");
        String type = (String) typeCombo.getSelectedItem();
        String hint = hintTextArea.getText().trim().replaceAll("\\s+", " ");
        String[] hashtag = hashtagField.getText().trim().split("\\s+");
        LocalDate dateModified;
        //Thiếu từ
        boolean check = true;
        if (!"".equals(word)) {
            if (!checkExistWord) {
                insertWordLbl.setVisible(false);
                if (phoneticField.getForeground() == Color.GRAY || "".equals(ipa)) {
                    phoneticField.setText(WordController.getPhonetic(word));
                    phoneticField.setForeground(Color.BLACK);
                    ipa = phoneticField.getText();
                }
            }

        } else {
            insertWordLbl.setText("*Hãy điền từ Tiếng Anh");
            insertWordLbl.setVisible(true);
            check = false;
        }
        //Thiếu nghĩa
        if (!"".equals(mean)) {
            insertMeanLbl.setVisible(false);
        } else {
            insertMeanLbl.setVisible(true);
            check = false;

        }
        //Thiếu gợi ý
        if (!"".equals(hint)) {
            insertHintLbl.setVisible(false);
        } else {
            insertHintLbl.setVisible(true);
            check = false;
        }
        //Thiếu hashtag
        if (!"".equals(hashtagField.getText().trim()) && hashtagField.getForeground() != Color.GRAY) {
            insertHashtagLbl.setVisible(false);

        } else {
            insertHashtagLbl.setVisible(true);
            check = false;
        }
        //thiếu ảnh
        if (imageURL == null) {
            JOptionPane.showMessageDialog(rootPane, "Bạn cần thêm ảnh");
            check = false;
        }
        if (check && !checkExistWord) {

            if (isEdit) {
                try {
                    Word w = WordController.findWord(word);
                    int index = WordController.words.indexOf(w);
                    w.setIpa(ipa);
                    w.setMean(mean);
                    w.setType(type);
                    w.setHint(hint);
                    w.setHashtag(hashtag);
                    w.setImageURL(imageURL);
                    w.setVoiceURL(voiceURL);
                    w.setDateModified(LocalDate.now());
                    WordController.words.set(index, w);
                    WordController.writeWord(WordController.getDataPath());
                    clearField();
                    this.dispose();
                }
                catch(Exception e){
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(rootPane, "Hãy giữ nguyên từ/cụm từ muốn sửa");
                }

            } else {
                List<Word> ws = new ArrayList<>();
                ws = WordController.words;
                WordController.words = ws;
                dateModified = LocalDate.now();
                Word initword = new Word(word, mean, ipa, type, imageURL, voiceURL, hint, hashtag, dateModified, 1);
                ws.add(initword);
                WordController.words = ws;
                WordController.writeWord(WordController.getDataPath());
                clearField();
            }

        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void typeComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_typeComboItemStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_typeComboItemStateChanged

    private void pickVoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickVoiceActionPerformed
        // TODO add your handling code here:
        int chose = -1;
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter imgFilter = new FileNameExtensionFilter("Support .mp3", "mp3");
        fileChooser.setFileFilter(imgFilter);
        fileChooser.setDialogTitle("Chọn âm thanh");
        chose = fileChooser.showOpenDialog(null);
        if (chose == JFileChooser.APPROVE_OPTION) {
            File voice = fileChooser.getSelectedFile();
            voiceURL = voice.getPath();
            voiceFileURL.setText(voice.getName());
        }
    }//GEN-LAST:event_pickVoiceActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if ("File Name".equals(voiceFileURL.getText())) {
            WordController.text2speech(wordField.getText());
        } else {
            System.out.println(voiceURL);
            WordController.playSound(voiceURL);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void phoneticFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneticFieldKeyReleased
        // TODO add your handling code here:
        phoneticField.setText(phoneticField.getText().replaceAll("[{}~`@#$^_+|<>\\[\\]]", ""));
    }//GEN-LAST:event_phoneticFieldKeyReleased

    private void wordFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wordFieldMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_wordFieldMouseClicked

    private void wordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wordFieldActionPerformed

    private void wordFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wordFieldKeyReleased
        // TODO add your handling code here:
        wordField.setText(wordField.getText().replaceAll("[{}~`@#$^_+|<>\\[\\]]", ""));
    }//GEN-LAST:event_wordFieldKeyReleased

    private void phoneticFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_phoneticFieldFocusGained
        // TODO add your handling code here:
        if (phoneticField.getForeground() == Color.GRAY) {
            phoneticField.setText("");
            phoneticField.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_phoneticFieldFocusGained

    private void hashtagFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hashtagFieldFocusGained
        // TODO add your handling code here:
        if (hashtagField.getForeground() == Color.GRAY) {
            hashtagField.setText("");
            hashtagField.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_hashtagFieldFocusGained

    private void wordFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_wordFieldFocusLost
        // TODO add your handling code here:
        if (!isEdit) {
            String inputWord = wordField.getText();
            if (WordController.isExistWord(inputWord)) {
                checkExistWord = true;
                insertWordLbl.setText("<html>*Đã tồn tại. <a href = ''>Click</a> để sửa</html>");
                insertWordLbl.setVisible(true);
                insertWordLbl.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                clkEdit = new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                       checkCreateEditUI = WordController.editWord(inputWord.toLowerCase());
                       clearField();
                       removeClkEdit();
                    }

                };
                insertWordLbl.addMouseListener(clkEdit);     
            }
        }
    }//GEN-LAST:event_wordFieldFocusLost

    private void wordFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_wordFieldFocusGained
        // TODO add your handling code here:

    }//GEN-LAST:event_wordFieldFocusGained

    private void meanFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_meanFieldFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_meanFieldFocusGained

    private void wordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wordFieldKeyPressed
        // TODO add your handling code here:
        insertWordLbl.setVisible(false);
    }//GEN-LAST:event_wordFieldKeyPressed

    private void meanFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_meanFieldKeyPressed
        // TODO add your handling code here:
        insertMeanLbl.setVisible(false);
    }//GEN-LAST:event_meanFieldKeyPressed

    private void hintTextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hintTextAreaKeyPressed
        // TODO add your handling code here:
        insertHintLbl.setVisible(false);
    }//GEN-LAST:event_hintTextAreaKeyPressed

    private void hashtagFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hashtagFieldKeyPressed
        // TODO add your handling code here:
        insertHashtagLbl.setVisible(false);
    }//GEN-LAST:event_hashtagFieldKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddWUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddWUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddWUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddWUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddWUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField hashtagField;
    private javax.swing.JTextArea hintTextArea;
    private javax.swing.JLabel imgLable;
    private javax.swing.JLabel insertHashtagLbl;
    private javax.swing.JLabel insertHintLbl;
    private javax.swing.JLabel insertMeanLbl;
    private javax.swing.JLabel insertWordLbl;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea meanField;
    private javax.swing.JTextField phoneticField;
    private javax.swing.JButton pickImg;
    private javax.swing.JButton pickVoice;
    private javax.swing.JComboBox<String> typeCombo;
    private javax.swing.JLabel voiceFileURL;
    private javax.swing.JTextField wordField;
    // End of variables declaration//GEN-END:variables

    public boolean isIsEdit() {
        return isEdit;
    }

    public void setIsEdit(boolean isEdit) {
        this.isEdit = isEdit;
    }

    public String getImageURL() {
        return imageURL;
    }

    public void setImageURL(String imageURL) {
        this.imageURL = imageURL;
    }

    public String getVoiceURL() {
        return voiceURL;
    }

    public void setVoiceURL(String voiceURL) {
        this.voiceURL = voiceURL;
    }

    public boolean isCheckExistWord() {
        return checkExistWord;
    }

    public void setCheckExistWord(boolean checkExistWord) {
        this.checkExistWord = checkExistWord;
    }

    public JButton getAddButton() {
        return addButton;
    }

    public void setAddButton(JButton addButton) {
        this.addButton = addButton;
    }

    public JButton getCancelButton() {
        return cancelButton;
    }

    public void setCancelButton(JButton cancelButton) {
        this.cancelButton = cancelButton;
    }

    public JTextField getHashtagField() {
        return hashtagField;
    }

    public void setHashtagField(JTextField hashtagField) {
        this.hashtagField = hashtagField;
    }

    public JTextArea getHintTextArea() {
        return hintTextArea;
    }

    public void setHintTextArea(JTextArea hintTextArea) {
        this.hintTextArea = hintTextArea;
    }

    public JLabel getImgLable() {
        return imgLable;
    }

    public void setImgLable(JLabel imgLable) {
        this.imgLable = imgLable;
    }

    public JLabel getInsertHashtagLbl() {
        return insertHashtagLbl;
    }

    public void setInsertHashtagLbl(JLabel insertHashtagLbl) {
        this.insertHashtagLbl = insertHashtagLbl;
    }

    public JLabel getInsertHintLbl() {
        return insertHintLbl;
    }

    public void setInsertHintLbl(JLabel insertHintLbl) {
        this.insertHintLbl = insertHintLbl;
    }

    public JLabel getInsertMeanLbl() {
        return insertMeanLbl;
    }

    public void setInsertMeanLbl(JLabel insertMeanLbl) {
        this.insertMeanLbl = insertMeanLbl;
    }

    public JLabel getInsertWordLbl() {
        return insertWordLbl;
    }

    public void setInsertWordLbl(JLabel insertWordLbl) {
        this.insertWordLbl = insertWordLbl;
    }

    public JButton getjButton1() {
        return jButton1;
    }

    public void setjButton1(JButton jButton1) {
        this.jButton1 = jButton1;
    }

    public JLabel getjLabel1() {
        return jLabel1;
    }

    public void setjLabel1(JLabel jLabel1) {
        this.jLabel1 = jLabel1;
    }

    public JLabel getjLabel2() {
        return jLabel2;
    }

    public void setjLabel2(JLabel jLabel2) {
        this.jLabel2 = jLabel2;
    }

    public JLabel getjLabel3() {
        return jLabel3;
    }

    public void setjLabel3(JLabel jLabel3) {
        this.jLabel3 = jLabel3;
    }

    public JLabel getjLabel4() {
        return jLabel4;
    }

    public void setjLabel4(JLabel jLabel4) {
        this.jLabel4 = jLabel4;
    }

    public JLabel getjLabel5() {
        return jLabel5;
    }

    public void setjLabel5(JLabel jLabel5) {
        this.jLabel5 = jLabel5;
    }

    public JLabel getjLabel6() {
        return jLabel6;
    }

    public void setjLabel6(JLabel jLabel6) {
        this.jLabel6 = jLabel6;
    }

    public JLabel getjLabel7() {
        return jLabel7;
    }

    public void setjLabel7(JLabel jLabel7) {
        this.jLabel7 = jLabel7;
    }

    public JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }

    public void setjScrollPane1(JScrollPane jScrollPane1) {
        this.jScrollPane1 = jScrollPane1;
    }

    public JScrollPane getjScrollPane2() {
        return jScrollPane2;
    }

    public void setjScrollPane2(JScrollPane jScrollPane2) {
        this.jScrollPane2 = jScrollPane2;
    }

    public JTextArea getMeanField() {
        return meanField;
    }

    public void setMeanField(JTextArea meanField) {
        this.meanField = meanField;
    }

    public JTextField getPhoneticField() {
        return phoneticField;
    }

    public void setPhoneticField(JTextField phoneticField) {
        this.phoneticField = phoneticField;
    }

    public JButton getPickImg() {
        return pickImg;
    }

    public void setPickImg(JButton pickImg) {
        this.pickImg = pickImg;
    }

    public JButton getPickVoice() {
        return pickVoice;
    }

    public void setPickVoice(JButton pickVoice) {
        this.pickVoice = pickVoice;
    }

    public JComboBox<String> getTypeCombo() {
        return typeCombo;
    }

    public void setTypeCombo(JComboBox<String> typeCombo) {
        this.typeCombo = typeCombo;
    }

    public JLabel getVoiceFileURL() {
        return voiceFileURL;
    }

    public void setVoiceFileURL(JLabel voiceFileURL) {
        this.voiceFileURL = voiceFileURL;
    }

    public JTextField getWordField() {
        return wordField;
    }

    public void setWordField(JTextField wordField) {
        this.wordField = wordField;
    }
    
    public void clearField(){
        this.wordField.setText("");
        this.phoneticField.setForeground(Color.GRAY);
        this.phoneticField.setText("Phiêm âm được sinh tự động nếu bạn bỏ trống");
        //Ô hashtag
        this.hashtagField.setForeground(Color.GRAY);
        this.hashtagField.setText("Hashtag ngăn cách bởi dấu cách");
        this.meanField.setText("");
        this.hintTextArea.setText("");
        this.insertWordLbl.setVisible(false);
        this.insertMeanLbl.setVisible(false);
        this.insertHintLbl.setVisible(false);
        this.insertHashtagLbl.setVisible(false);
        imageURL = null;
        voiceURL = null;
        imgLable.setText("Thêm ảnh");
        imgLable.setIcon(null);
        checkExistWord = false;
                
    }

    public void removeClkEdit(){
        if(checkCreateEditUI){
        System.out.println("Bỏ mouse listener");
        insertWordLbl.removeMouseListener(clkEdit);
        }             
    }
}
